/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.18.6.0 (NJsonSchema v9.10.67.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import 'rxjs/add/observable/fromPromise';
import 'rxjs/add/observable/of';
import 'rxjs/add/observable/throw';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import 'rxjs/add/operator/mergeMap';
import 'rxjs/add/operator/catch';

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { Http, Headers, Response } from '@angular/http';

import { EndpointMessageQueue, EndpointInfo, EndpointManifest, IClientService, SwaggerException } from '../core/index';

import * as crypt from 'crypto-js';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class AngularClientService {
    private http: Http;
    public baseUrl: string;
    public secret: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * Publish an event-queue to Congether
     * @param endpoint Endpoint identifier
     * @param x_Congether_SIGN (optional) Signature of Content
     * @param eventQueue (optional) Event-Queue
     * @return Success
     */
    apiByVersionEndpointByEndpointEventPost(endpoint: string, x_Congether_SIGN: string | null | undefined, eventQueue: EndpointMessageQueue | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/1.0/Endpoint/{endpoint}/event";
        if (endpoint === undefined || endpoint === null)
            throw new Error("The parameter 'endpoint' must be defined.");
        url_ = url_.replace("{endpoint}", encodeURIComponent("" + endpoint)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(eventQueue);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "X-Congether-SIGN": x_Congether_SIGN !== undefined && x_Congether_SIGN !== null ? "" + x_Congether_SIGN : crypt.HmacSHA256(content_, this.secret).toString(), 
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApiByVersionEndpointByEndpointEventPost(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processApiByVersionEndpointByEndpointEventPost(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processApiByVersionEndpointByEndpointEventPost(response: Response): Observable<void> {
        const status = response.status;

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return _observableOf<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Request manifest for endpoint
     * @param endpoint Endpoint identifier
     * @param x_Congether_SIGN (optional) Signature of Content
     * @param endpointInfo (optional) Endpoint-Info
     * @return Success
     */
    apiByVersionEndpointByEndpointManifestPost(endpoint: string, x_Congether_SIGN: string | null | undefined, endpointInfo: EndpointInfo | null | undefined): Observable<EndpointManifest> {
        let url_ = this.baseUrl + "/api/1.0/Endpoint/{endpoint}/manifest";
        if (endpoint === undefined || endpoint === null)
            throw new Error("The parameter 'endpoint' must be defined.");
        url_ = url_.replace("{endpoint}", encodeURIComponent("" + endpoint)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(endpointInfo);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "X-Congether-SIGN": x_Congether_SIGN !== undefined && x_Congether_SIGN !== null ? "" + x_Congether_SIGN : crypt.HmacSHA256(content_, this.secret).toString(), 
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApiByVersionEndpointByEndpointManifestPost(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processApiByVersionEndpointByEndpointManifestPost(<any>response_);
                } catch (e) {
                    return <Observable<EndpointManifest>><any>_observableThrow(e);
                }
            } else
                return <Observable<EndpointManifest>><any>_observableThrow(response_);
        }));
    }

    protected processApiByVersionEndpointByEndpointManifestPost(response: Response): Observable<EndpointManifest> {
        const status = response.status;

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? EndpointManifest.fromJS(resultData200) : new EndpointManifest();
            return _observableOf(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return _observableOf<EndpointManifest>(<any>null);
    }
}


function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    return _observableThrow(new SwaggerException(message, status, response, headers, result));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = function() { 
                observer.next(this.result);
                observer.complete();
            }
            reader.readAsText(blob); 
        }
    });
}